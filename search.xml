<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BCD码</title>
    <url>/2024/05/07/BCD%E7%A0%81/</url>
    <content><![CDATA[<p>Binary-Coded Decimal，二进制编码的十进制数。将每个十进制的0-9映射到四个二进制位。显然四位二进制位可以表示16种数字，映射到9个数后必然有一些位是不合法的，同时映射方案不同，得到的BCD码也不一样。</p>
<h1 id="BCD码"><a href="#BCD码" class="headerlink" title="BCD码"></a>BCD码</h1><p><img src="/images/BCD%E7%A0%81/1.PNG" alt=" "></p>
<span id="more"></span>
<h1 id="8421码"><a href="#8421码" class="headerlink" title="8421码"></a>8421码</h1><p>8421码与十进制数的互相转换：<br>1000 1000 &#x3D; 88<br>DEC &#x3D; BCD &#x2F; 16 * 10 +BCD % 16<br>BCD &#x3D; DEC &#x2F; 10 * 16 + BCD % 10</p>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>8421码</tag>
      </tags>
  </entry>
  <entry>
    <title>下拉电阻、上拉电阻</title>
    <url>/2024/05/02/%E4%B8%8B%E6%8B%89%E7%94%B5%E9%98%BB%E3%80%81%E4%B8%8A%E6%8B%89%E7%94%B5%E9%98%BB/</url>
    <content><![CDATA[<p>下拉电阻可以将一个不确定的信号钳位在低电平。<br>上拉电阻可以增强输出引脚的驱动能力。</p>
<span id="more"></span>
<h1 id="悬空状态"><a href="#悬空状态" class="headerlink" title="悬空状态"></a>悬空状态</h1><p>如图所示，当基极什么都不接的时候，该点的电压就是悬空状态。此时如果转化为数字信号，其既可能输出0，也可能输出1。<br><img src="/images/%E4%B8%8B%E6%8B%89%E7%94%B5%E9%98%BB%E3%80%81%E4%B8%8A%E6%8B%89%E7%94%B5%E9%98%BB/1.png" alt=" "></p>
<h1 id="下拉"><a href="#下拉" class="headerlink" title="下拉"></a>下拉</h1><p>此时，将该点连接一个电阻接地，由于该电路中NP结电阻无穷大，分走所有电压，所以此时该点的电压变为0，确定性的输出了0电压。<br><img src="/images/%E4%B8%8B%E6%8B%89%E7%94%B5%E9%98%BB%E3%80%81%E4%B8%8A%E6%8B%89%E7%94%B5%E9%98%BB/2.png" alt=" "><br>该电阻存在的必要性是让该点同样可以输出高电压，如下图所示：<br><img src="/images/%E4%B8%8B%E6%8B%89%E7%94%B5%E9%98%BB%E3%80%81%E4%B8%8A%E6%8B%89%E7%94%B5%E9%98%BB/3.png" alt=" "></p>
<h1 id="上拉"><a href="#上拉" class="headerlink" title="上拉"></a>上拉</h1><p>如图所示，上拉电阻的作用是将其与单片机内的等效电阻并联，让整体电阻变小，从而分走更少的电压，这样就可以提升输出点的电压了。<br><img src="/images/%E4%B8%8B%E6%8B%89%E7%94%B5%E9%98%BB%E3%80%81%E4%B8%8A%E6%8B%89%E7%94%B5%E9%98%BB/4.png" alt=" "><br>同样，上拉电阻也能解决悬空状态的问题，如图所示，如果想要输出高电平，同样可以通过并联电阻解决。<br><img src="/images/%E4%B8%8B%E6%8B%89%E7%94%B5%E9%98%BB%E3%80%81%E4%B8%8A%E6%8B%89%E7%94%B5%E9%98%BB/5.png" alt=" "><br>并联后，上面的电阻变小，而下方电阻为无穷大，所有电压将被下方分走。<br><img src="/images/%E4%B8%8B%E6%8B%89%E7%94%B5%E9%98%BB%E3%80%81%E4%B8%8A%E6%8B%89%E7%94%B5%E9%98%BB/6.png" alt=" "><br>参考来源：B站爱上半导体</p>
]]></content>
      <categories>
        <category>底层原理</category>
      </categories>
      <tags>
        <tag>数字电路</tag>
        <tag>上拉电阻</tag>
        <tag>下拉电阻</tag>
      </tags>
  </entry>
  <entry>
    <title>DS1302</title>
    <url>/2024/05/07/DS1302/</url>
    <content><![CDATA[<h1 id="模块功能"><a href="#模块功能" class="headerlink" title="模块功能"></a>模块功能</h1><p>提供年、月、日、时、分、秒的计时。</p>
<h1 id="引脚定义"><a href="#引脚定义" class="headerlink" title="引脚定义"></a>引脚定义</h1><p><img src="/images/DS1302/1.png" alt=" "></p>
<span id="more"></span>
<h1 id="应用电路"><a href="#应用电路" class="headerlink" title="应用电路"></a>应用电路</h1><p>VCC1、2：分别是备用电源和主电源，备用电源提供非易失性存储功能。<br>X1和X2表示晶振：32.768KHZ，用于提供时钟信号，晶振的核心是石英晶体，通过改变其形状、尺寸、切割方式而产生不同的频率。<br>CE：Chip Enable，芯片使能。<br>I&#x2F;O：数据输入输出<br>SCLK：串行时钟<br><img src="/images/DS1302/2.png" alt=" "></p>
<h1 id="内部结构"><a href="#内部结构" class="headerlink" title="内部结构"></a>内部结构</h1><p>晶振提供时钟信号，RAM存储时间信息并提供通用寄存器。通过CE、I&#x2F;O、SCLK接口与RAM交互。<br><img src="/images/DS1302/3.png" alt=" "></p>
<h1 id="在哪儿、读-写？"><a href="#在哪儿、读-写？" class="headerlink" title="在哪儿、读&#x2F;写？"></a>在哪儿、读&#x2F;写？</h1><p>一个字节中，最低位控制读写、第6位选择RAM or CK（上面加一横表示低电平有效）<br><img src="/images/DS1302/4.png" alt=" "><br>WP表示Write Protect，置1时不可写入。<br>TCS是备用电池的设置。<br><img src="/images/DS1302/5.png" alt=" "></p>
<h1 id="时序定义"><a href="#时序定义" class="headerlink" title="时序定义"></a>时序定义</h1><p>CE全程置1；<br>I&#x2F;O上升沿写入单片机、单片机中的数据每个下降沿到I&#x2F;O口处。<br>第一个字节确认读出或写入操作、确认地址（在哪儿操作）。<br>第二个字节操作读出数据或者继续写入数据。<br><img src="/images/DS1302/5.png" alt=" "><br>通过for循环搭配SCLK信号，串行读入或者写出数据。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DS1302_WriteByte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> Command, <span class="type">unsigned</span> <span class="type">char</span> Data)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"></span><br><span class="line">        DS1302_CE = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">                DS1302_IO = Command &amp; (<span class="number">0x01</span>&lt;&lt;i);</span><br><span class="line">                DS1302_SCLK = <span class="number">1</span>;</span><br><span class="line">                DS1302_SCLK = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">                DS1302_IO = Data &amp; (<span class="number">0x01</span>&lt;&lt;i);</span><br><span class="line">                DS1302_SCLK = <span class="number">1</span>;</span><br><span class="line">                DS1302_SCLK = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        DS1302_CE = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">DS1302_ReadByte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> Command)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> i, Data = <span class="number">0x00</span>;</span><br><span class="line"></span><br><span class="line">        DS1302_CE = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">                DS1302_IO = Command &amp; (<span class="number">0x01</span>&lt;&lt;i);</span><br><span class="line">                DS1302_SCLK = <span class="number">0</span>;</span><br><span class="line">                DS1302_SCLK = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">8</span> ;i++)</span><br><span class="line">        &#123;</span><br><span class="line">                DS1302_SCLK = <span class="number">1</span>;</span><br><span class="line">                DS1302_SCLK = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (DS1302_IO) &#123;Data |= (<span class="number">0x01</span>&lt;&lt;i);&#125;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        DS1302_CE = <span class="number">0</span>;</span><br><span class="line">        DS1302_IO = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Data;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考来源：DS1302 Trickle-Charge Timekeeping Chip; B站江协科技</p>
]]></content>
      <categories>
        <category>元件模块</category>
      </categories>
      <tags>
        <tag>时钟电路</tag>
        <tag>实时时钟</tag>
        <tag>单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>从原子到数字电路元器件</title>
    <url>/2024/04/29/%E4%BB%8E%E5%8E%9F%E5%AD%90%E5%88%B0%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E5%85%83%E5%99%A8%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="从原子出发"><a href="#从原子出发" class="headerlink" title="从原子出发"></a>从原子出发</h1><p>原子由中子、质子、电子构成，质子带正电、电子带负电。不同原子因最外层电子数量不同而容易失去或者得到电子，呈现出正电性或者负电性。<br><img src="/images/%E4%BB%8E%E5%8E%9F%E5%AD%90%E5%88%B0%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E5%85%83%E5%99%A8%E4%BB%B6/1.PNG" alt=" "></p>
<span id="more"></span>

<h1 id="半导体"><a href="#半导体" class="headerlink" title="半导体"></a>半导体</h1><p>硅的最外层有4个电子，处于导体和绝缘体之间，被称为半导体。一堆硅原子在一起会通过共用电子形成共价键得到稳定结构。<br><img src="/images/%E4%BB%8E%E5%8E%9F%E5%AD%90%E5%88%B0%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E5%85%83%E5%99%A8%E4%BB%B6/2.PNG" alt=" "></p>
<h1 id="给半导体加点料"><a href="#给半导体加点料" class="headerlink" title="给半导体加点料"></a>给半导体加点料</h1><p>在纯净的硅中掺杂最外层带5个电子的磷元素和带3个电子的硼元素，由于原子最外层无法形成稳定的8电子结构，其导电性上升。<br><img src="/images/%E4%BB%8E%E5%8E%9F%E5%AD%90%E5%88%B0%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E5%85%83%E5%99%A8%E4%BB%B6/3.PNG" alt=" "></p>
<h1 id="PN结"><a href="#PN结" class="headerlink" title="PN结"></a>PN结</h1><p>将上述两种半导体拼接，P型半导体倾向于得到电子，显负电性，N型半导体倾向于失去电子，显正电性。此时将会在中间形成一个电场，阻止电子继续移动。<br><img src="/images/%E4%BB%8E%E5%8E%9F%E5%AD%90%E5%88%B0%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E5%85%83%E5%99%A8%E4%BB%B6/4.PNG" alt=" "></p>
<h1 id="二极管"><a href="#二极管" class="headerlink" title="二极管"></a>二极管</h1><p>当我们施加外部电场客服耗尽层中形成的电场时，电路会被导通，反之如果加强电场，则电路无法导通。可以分析N型半导体端应该接负极，P型半导体端接正极，方能克服电场，让电路导通。</p>
<h1 id="MOS"><a href="#MOS" class="headerlink" title="MOS"></a>MOS</h1><p>继续利用半导体设计现代计算机需要的元器件。如图所示，一块大的半导体整体为P型，左右两边各有一小块N型，此时无论如何连接电路，都会存在方向相反的两个等效二极管存在，因此无法导通。但我们在中间位置加一个类似电容的结构，通电后形成电场，让电子集中到上方。此时其等效为一个N型半导体，也就是说中间一整块都成了N型半导体，此时电路导通。<br><img src="/images/%E4%BB%8E%E5%8E%9F%E5%AD%90%E5%88%B0%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E5%85%83%E5%99%A8%E4%BB%B6/5.PNG" alt=" "></p>
<h1 id="PMOS-NMOS"><a href="#PMOS-NMOS" class="headerlink" title="PMOS&amp;NMOS"></a>PMOS&amp;NMOS</h1><p>NMOS的工作模式是栅极接入正向偏压才导通，而PMOS是栅极接入负向偏压才导通<br><img src="/images/%E4%BB%8E%E5%8E%9F%E5%AD%90%E5%88%B0%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E5%85%83%E5%99%A8%E4%BB%B6/6.PNG" alt=" "></p>
<h1 id="符号化"><a href="#符号化" class="headerlink" title="符号化"></a>符号化</h1><p><img src="/images/%E4%BB%8E%E5%8E%9F%E5%AD%90%E5%88%B0%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E5%85%83%E5%99%A8%E4%BB%B6/7.PNG" alt=" "></p>
<h1 id="用MOS管构造第一个元器件"><a href="#用MOS管构造第一个元器件" class="headerlink" title="用MOS管构造第一个元器件"></a>用MOS管构造第一个元器件</h1><p>将NMOS和PMOS如图所示连接，其中VDD表示相对高压、VSS表示相对低压，此时A端接高压NMOS导通，NMOS接VSS输出低电压；A端接低压PMOS导通，PMOS接VDD输出高电压。此时高电压用1表示、低电压用0表示，我们就得到了基本元器件，非门。<br><img src="/images/%E4%BB%8E%E5%8E%9F%E5%AD%90%E5%88%B0%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E5%85%83%E5%99%A8%E4%BB%B6/8.PNG" alt=" "></p>
<h1 id="进入数字电路时代"><a href="#进入数字电路时代" class="headerlink" title="进入数字电路时代"></a>进入数字电路时代</h1><p><img src="/images/%E4%BB%8E%E5%8E%9F%E5%AD%90%E5%88%B0%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E5%85%83%E5%99%A8%E4%BB%B6/9.PNG" alt=" "><br>参考来源：B站硬件茶谈</p>
]]></content>
      <categories>
        <category>底层原理</category>
      </categories>
      <tags>
        <tag>数字电路</tag>
        <tag>半导体</tag>
        <tag>门电路</tag>
      </tags>
  </entry>
  <entry>
    <title>从锁存器到RAM</title>
    <url>/2024/05/02/%E4%BB%8E%E9%94%81%E5%AD%98%E5%99%A8%E5%88%B0RAM/</url>
    <content><![CDATA[<p>当电路中输出和输入相关时，我们就有机会得到带有存储功能的电路了，最简单的例子是SR锁存器。</p>
<h1 id="SR锁存器"><a href="#SR锁存器" class="headerlink" title="SR锁存器"></a>SR锁存器</h1><p><img src="/images/%E4%BB%8E%E9%94%81%E5%AD%98%E5%99%A8%E5%88%B0RAM/1.png" alt=" "></p>
<span id="more"></span>

<p>分析该电路时，我们从确定性的角度出发，对于与非门，任何一端输入0，结果一定是1。那么我们很容易知道，(S, R) &#x3D; (0, 1), (1, 0), (1, 1)的情况。但当其为(0, 0)时，其保持上一阶段的状态，这就起到了保存一位数据的作用。<br><img src="/images/%E4%BB%8E%E9%94%81%E5%AD%98%E5%99%A8%E5%88%B0RAM/2.png" alt=" "></p>
<h1 id="D触发器"><a href="#D触发器" class="headerlink" title="D触发器"></a>D触发器</h1><p>为了解决多个SR触发器无法同时动作以及SR触发器(1, 1)为非法状态的问题，我们引入D触发器，其电路示意图如下。<br><img src="/images/%E4%BB%8E%E9%94%81%E5%AD%98%E5%99%A8%E5%88%B0RAM/3.png" alt=" "></p>
<h1 id="SRAM"><a href="#SRAM" class="headerlink" title="SRAM"></a>SRAM</h1><p>由此，我们就可以构建RAM了，也就是我们所说的内存或者Cache。其基本结构是MOS管，通过行选和列选信号确定一bit的数据，并通过读写控制信号控制读或者写。<br><img src="/images/%E4%BB%8E%E9%94%81%E5%AD%98%E5%99%A8%E5%88%B0RAM/4.png" alt=" "><br>一共用了8个MOS管，速度非常快，但是集成度做不上去，因此只用在Cache上。</p>
<h1 id="DRAM"><a href="#DRAM" class="headerlink" title="DRAM"></a>DRAM</h1><p>为了提高集成度，我们使用电容做数据存储的媒介，MOS管作为开关。但电容会缓慢放电，因此为了维持数据，其需要不断被补充电荷，这个过程就是刷新。因此这种RAM被称为动态RAM，DRAM用于内存。<br><img src="/images/%E4%BB%8E%E9%94%81%E5%AD%98%E5%99%A8%E5%88%B0RAM/5.png" alt=" "><br>参考来源：B站Ele实验室</p>
]]></content>
      <categories>
        <category>底层原理</category>
      </categories>
      <tags>
        <tag>数字电路</tag>
        <tag>RAM</tag>
      </tags>
  </entry>
</search>
